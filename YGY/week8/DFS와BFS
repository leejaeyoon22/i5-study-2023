import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class Main {

	static Scanner scan = new Scanner(System.in);
	static int N,M,V;

	static boolean[][] Graph = new boolean[1001][1001];
	static boolean[] mark = new boolean[1001]; // DFS 재귀

	static Queue<Integer> queue = new LinkedList<>(); // BFS 큐

	public static void main(String[] args)
	{

		N = scan.nextInt();
		M = scan.nextInt();
		V = scan.nextInt();


		for(int i=0;i<M;i++)
		{
			int x= scan.nextInt();
			int y = scan.nextInt();
			Graph[x][y]=true;
			Graph[y][x]=true;
			Graph[x][0]=true;
			Graph[y][0]=true;
		}
reset();
dfs(V);

		System.out.println();

		reset();
		bfs(V);

	}

	static void reset()
	{
		for(int i=0;i<1001;i++)
			mark[i]=false;
	}

	static void dfs(int node)
	{

		if(mark[node] == true )
			return ; 

		mark[node] = true;
		System.out.print(node+" ");

		for(int i=1; i<=N; i++)
		{
			if(Graph[node][i]==true)
				dfs(i);
		}

}

	static void bfs(int node)
	{
		queue.add(node);

		while(true)
		{

			if(mark[node]==false )
			{
				System.out.print(node+" ");
				mark[node]=true;
			}	

			for(int i=1;i<=N;i++)
			{	
				if(Graph[node][i]==true && mark[i]==false)
				{	
					System.out.print(i+" ");
					mark[i]= true;
					queue.add(i);
				}
			}
			if(queue.isEmpty())
				break;
			node = queue.poll();
    }
	}
}


